import unittest
from acme import Product
from acme_report import generate_products, ADJECTIVES, NOUNS

class AcmeProductTests(unittest.TestCase):
    '''making sure acme products are the tops!'''
    
    def test_default_product_price(self):
         '''test default product price being 10.'''
         prod = Product('Test Product')
         self.assertEqual(prod.price, 10)
         
    def test_default_product_flammability(self):
        '''default is 0.5'''
        prod = Product('Test Product')
        self.assertEqual(prod.flammability, 0.5)


   def test_stealability(self):
       '''situation where stealability should print not so stealable'''
       the_moon = Product(price=10, weight=200)
       self.assertEqual(the_moon.stealability(), 'not so stealable...')
   
       '''situation where stealability should print kinda stealable'''
       bunny = Product(price=10, weight=20)
       self.assertEqual(bunny.stealability(), 'kinda stealable')
   
      '''situation where stealability should print very stealable'''
      blueprints = Product(price=20, weight=10)
      self.assertEqual(blueprints.stealability(), 'very stealable!') 
        
  def test_explodability(self):
      '''situation where explodability should print ...fizzle.'''
      gameboy = Product(weight=2, flammability=2)
      self.assertEqual(gameboy.explodability(), '...fizzle.')
      
      '''situation where explodability should print ...boom!'''
      shaving_cream = Product(weight=3, flammability=10)
      self.assertEqual(shaving_cream.explodability(), '...boom!')
      
      '''situation where explodability should print ...BABOOM!!'
      pie = Product(weight=1, flammability=100)
      self.assertEqual(pie.explodability(), '...BABOOM!!')
         
class AcmeReportTests(unittest.TestCase):
    '''making sure Acme tests are scientifically cutthroat'''
    
    def test_default_num_products(self):
        '''confirms 30 products are generated by default'''
        products = generate_products()
        self.assertEqual(len(products), 30)
        
   def test_legal_names(self):
        '''confirms all product names are valid'''
        products = generate_products()
        names = []
        for prod in products:
            names.append(prod[0])
        unique_names = []
        for name in names:
            if name not in unique_names:
                unique_names.append(name)
        self.assertIn(NOUNS, unique_names)
        self.assertIn(ADJECTIVES, unique_names)
        

 if __name__ == '__main__':
     unittest.main()
